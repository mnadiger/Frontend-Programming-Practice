// ***Following statements used to create a new empty array:**
    A. let arr = [ ];
    
    B. let arr = new Array(0);
    
    C. let arr = Array();
    
    // Note: [] uses the literal syntax, new Array(0) uses the constructor with length 0, and Array() uses the shorthand constructor.

**The push() method adds elements to the end of an array, whereas pop() removes from the end
** and shift()/unshift() works with the beginning of the array to remove and add elements respectively.

**What is the output of the following code snippet?

    let arr1 = [1, 2, 3];
    let arr2 = arr1;
    arr2.push(4);
    console.log(arr1) //Â [1, 2, 3, 4]

    
    Ans: [1, 2, 3, 4]
    
    Explanation:  The array arr2 is a reference to the same array object as arr1. Therefore, when we modify arr2, arr1 is also modified.
    and   also  console.log(arr2) // [1, 2, 3, 4]





***SPLICE() : The splice() method in JavaScript is used to modify an array by adding, removing, or replacing elements. It directly alters the original array and returns an array of the removed elements.

Syntax: array.splice(start, deleteCount, item1, item2, ...);

Parameters:
    start: The index at which to begin modifying the array. If negative, it counts from the end of the array. 
    deleteCount: (Optional) The number of elements to remove starting from the start index. If omitted, all elements from start to the end are removed. 
    item1, item2, ...: (Optional) New elements to insert into the array at the start index. 

Key Behaviors:
    Modifies the original array:  Unlike slice(), splice() changes the array it's called on.
    Returns removed elements: Returns an array containing the elements removed. If no elements are removed, it returns an empty array.
    Adding elements: If deleteCount is 0, you can use splice() to insert new elements without removing any.
    Negative start index: A negative start index counts from the end of the array (e.g., -1 is the last element).
    Versatility: splice() can be used to remove, replace, or add elements, making it a powerful array manipulation tool.

Examples:

    let fruits = ["apple", "banana", "cherry", "date"];
    
    // Remove 1 element at index 2
    let removed = fruits.splice(2, 1); 
    console.log(fruits); // Output: ["apple", "banana", "date"]
    console.log(removed); // Output: ["cherry"]
    
    // Insert "grape" at index 1, without removing any
    fruits.splice(1, 0, "grape");
    console.log(fruits); // Output: ["apple", "grape", "banana", "date"]
    
    // Replace "banana" with "kiwi" at index 2
    fruits.splice(2, 1, "kiwi");
    console.log(fruits); // Output: ["apple", "grape", "kiwi", "date"]
    
    // Remove last 2 elements
    fruits.splice(-2, 2);
    console.log(fruits); // Output: ["apple", "grape"]


**SLICE(): The slice() method in JavaScript is used to extract a section of an array or string and returns a new array or string. It does not modify the original array or string.

    **Array slice() Method
    
        Syntax: array.slice(start, end)

            start: The index to start the slice from (inclusive). If omitted, defaults to 0.
            end: The index to end the slice at (exclusive). If omitted, defaults to the end of the array.

        Behavior:
            Returns a new array containing the elements from the start index up to (but not including) the end index.
            If start is negative, it counts from the end of the array.
            If end is negative, it counts from the end of the array.
            If start is greater than end, an empty array is returned.
            If end is greater than the length of the array, it slices to the end of the array.
            It creates a shallow copy of the array. Changes to elements in the copied array will affect the original array if they are objects.

        Examples:

            const arr = [1, 2, 3, 4, 5];
            const slicedArr1 = arr.slice(1, 3); // Returns [2, 3]
            const slicedArr2 = arr.slice(2);    // Returns [3, 4, 5]
            const slicedArr3 = arr.slice(-2);   // Returns [4, 5]
            const slicedArr4 = arr.slice(1, -1); // Returns [2, 3, 4]

    **String slice() Method

        Syntax:  string.slice(start, end)
            start: The index to start the slice from (inclusive).
            end: The index to end the slice at (exclusive).

        Behavior:
            Returns a new string containing the characters from the start index up to (but not including) the end index.
            If start is negative, it counts from the end of the string.
            If end is negative, it counts from the end of the string.
            If start is greater than end, an empty string is returned.

        Examples:

            const str = "Hello World";
            const slicedStr1 = str.slice(1, 5); // Returns "ello"
            const slicedStr2 = str.slice(6); // Returns "World"
            const slicedStr3 = str.slice(-5); // Returns "World"
            const slicedStr4 = str.slice(1, -1); // Returns "ello Worl"

    Main Difference : slice() creates a new array, while splice() modifies the original array.







sd
sd
asd
asd
asd
as
d
